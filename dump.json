[
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/index.js",
    "memberof": null,
    "longname": "src/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "\"use strict\";\n\n/**\n * @access public\n */\nclass Jimple {\n    /**\n     * Builds a new Jimple instance\n     */\n    constructor() {\n        /**\n         * @type {Map<String, *>}\n         * @access protected\n         */\n        this.values = new Map();\n\n        /**\n         * @type {Map<String, Set>}\n         * @access protected\n         */\n        this.tagmap = new Map();\n\n        /**\n         * @type {Map<String, *>}\n         * @access protected\n         */\n        this.shared = new Map();\n\n        /**\n         * @type {Set<String>}\n         * @access protected\n         */\n        this.frozen = new Set();\n\n        Object.freeze(this);\n    }\n\n    /**\n     *\n     * @param {Array<String>|Function(deps: *, container: Jimple): *} deps   List of dependencies to inject or executable function\n     * @param {Function(deps: *, container: Jimple): *}               [code] Executable function\n     *\n     * @returns {*} Result of executing the provided function as code\n     */\n    use(deps, code) {\n        if (deps.constructor.name === \"Array\") {\n            deps = deps || [];\n            deps.forEach((value, key) => deps[key] = this.get(value));\n            deps.push(this);\n\n            return code.apply(null, deps);\n        }\n\n        if (typeof deps === \"function\") {\n            return deps(this);\n        } else {\n            return code(this);\n        }\n    }\n\n    /**\n     * Sets a parameter or an object factory\n     *\n     * @param {String}                           name   The unique identifier for the parameter or factory\n     * @param {*|Function(container: Jimple): *} value  The parameter value or a factory function\n     * @param {Array<String>}                    [tags] An array of tags to associate to the parameter or factory\n     *\n     * @returns {Jimple} The current Jimple instance\n     */\n    define(name, value, tags) {\n        if (typeof name !== \"string\") {\n            throw new Error(\"Argument #1 passed to Jimple.define must be a string identifier\")\n        }\n\n        if (this.values.has(name)) {\n            (this.values.get(name).tags || []).forEach(tag => {\n                this.tagmap.get(tag).delete(name);\n            });\n\n            this.values.delete(name);\n        }\n\n        if (typeof value !== \"function\") {\n            this.values.set(name, () => value);\n        } else {\n            this.values.set(name, value);\n        }\n\n        this.values.get(name).tags = tags || [];\n        this.values.get(name).tags.forEach(tag => {\n            if (this.tagmap.has(tag) === false) {\n                this.tagmap.set(tag, new Set());\n            }\n\n            this.tagmap.get(tag).add(name);\n        });\n\n        if (this.shared.has(name)) {\n            this.shared.delete(name);\n        }\n\n        return this;\n    }\n\n    /**\n     *\n     * @param {String}                         name   The unique identifier for the factory\n     * @param {Function(container: Jimple): *} code   The executable factory function\n     * @param {Array<String>}                  [tags] An array of tags to associate to the factory\n     *\n     * @returns {Jimple} The current Jimple instance\n     */\n    share(name, code, tags) {\n        if (typeof name !== \"string\") {\n            throw new Error(\"Argument #1 passed to Jimple.share must be a string identifier\")\n        }\n\n        if (typeof code !== \"function\") {\n            throw new Error(\"Argument #2 passed to Jimple.share must be a function\")\n        }\n\n        return this.define(\n            name,\n            jimple => {\n                if (jimple.shared.has(name) === false) {\n                    jimple.shared.set(name, code(jimple));\n                }\n\n                let instance = jimple.shared.get(name);\n\n                this.frozen.add(name);\n\n                return instance;\n            },\n            tags || []\n        );\n    }\n\n    /**\n     *\n     * @param {String}                         name   The unique identifier for the factory\n     * @param {Function(container: Jimple): *} code   The executable factory function\n     * @param {Array<String>}                  [tags] An array of tags to associate to the factory\n     *\n     * @returns {Jimple} The current Jimple instance\n     */\n    factory(name, code, tags) {\n        if (typeof name !== \"string\") {\n            throw new Error(\"Argument #1 passed to Jimple.factory must be a string identifier\")\n        }\n\n        if (typeof code !== \"function\") {\n            throw new Error(\"Argument #2 passed to Jimple.factory must be a function\")\n        }\n\n        return this.define(\n            name,\n            jimple => {\n                let instance = code(jimple);\n\n                this.frozen.add(name);\n\n                return instance;\n            },\n            tags || []\n        );\n    }\n\n    /**\n     *\n     * @param {String}                                     name   The unique identifier for the parameter or factory to extend\n     * @param {Function(service: *, container: Jimple): *} code   The executable extended function\n     * @param {Array<String>}                              [tags] An array of tags to associate to the the parameter or factory to extend\n     *\n     * @returns {Jimple} The current Jimple instance\n     */\n    extend(name, code, tags) {\n        if (typeof name !== \"string\") {\n            throw new Error(\"Argument #1 passed to Jimple.extend must be a string identifier\")\n        }\n\n        if (typeof code !== \"function\") {\n            throw new Error(\"Argument #2 passed to Jimple.extend must be a function\")\n        }\n\n        if (this.frozen.has(name)) {\n            throw new Error(\"Cannot extend an already fetched service\");\n        }\n\n        let service = this.raw(name);\n\n        return this.share(\n            name,\n            jimple => code(service(jimple), jimple),\n            tags || this.values.get(name).tags\n        );\n    }\n\n    /**\n     *\n     * @param {String} name The unique identifier for the parameter, service or factory\n     *\n     * @returns {Boolean} Wether the parameter, service or factory exists\n     */\n    exists(name) {\n        if (typeof name !== \"string\") {\n            throw new Error(\"Argument #1 passed to Jimple.exists must be a string identifier\")\n        }\n\n        return this.values.has(name);\n    }\n\n    /**\n     *\n     * @param {String} name The unique identifier for the parameter, service or factory to fetch\n     *\n     * @returns {*} Result of executing the factory function\n     */\n    get(name) {\n        if (typeof name !== \"string\") {\n            throw new Error(\"Argument #1 passed to Jimple.get must be a string identifier\")\n        }\n\n        return this.raw(name)(this);\n    }\n\n    /**\n     *\n     * @deprecated Use {@link Jimple#tagged} instead\n     * @see Jimple#tagged\n     *\n     * @param {String} tag The tag name for which to fetch parameters, services or factories\n     *\n     * @return {Array} Service names associated with the provided tag\n     */\n    getTagged(tag) {\n        return this.tagged(tag);\n    }\n\n    /**\n     *\n     * @param {String} tag tag The tag name for which to fetch parameters, services or factories\n     *\n     * @returns {Array} Service names associated with the provided tag\n     */\n    tagged(tag) {\n        if (typeof tag !== \"string\") {\n            throw new Error(\"Argument #1 passed to Jimple.tagged must be a string identifier\")\n        }\n\n        return Array.from(this.tagmap.get(tag) || []);\n    }\n\n    /**\n     *\n     * @deprecated\n     *\n     * @return {Array} Declared parameter, service and factory names\n     */\n    keys() {\n        return Array.from(this.values.keys());\n    }\n\n    /**\n     *\n     * @param {Function(): *} code Function to be protected from becoming a factory\n     *\n     * @returns {Function(): *} Function wrapping the provided function as code\n     */\n    protect(code) {\n        if (typeof code !== \"function\") {\n            throw new Error(\"Argument #1 passed to Jimple.protect must be a function\")\n        }\n\n        return () => code;\n    }\n\n    /**\n     *\n     * @param {String} name The unique identifier for the factory to fetch\n     *\n     * @returns {Function(container: Jimple): *} The declared factory function\n     */\n    raw(name) {\n        if (typeof name !== \"string\") {\n            throw new Error(\"Argument #1 passed to Jimple.raw must be a string identifier\")\n        }\n\n        if (this.exists(name) === false) {\n            throw new Error(`Identifier ${name} is not defined`);\n        }\n\n        return this.values.get(name);\n    }\n\n    /**\n     *\n     * @returns {Jimple} The current Jimple instance wrapped in a Proxy\n     */\n    proxify() {\n        return JimpleProxified.fromJimple(this);\n    }\n}\n\n/**\n * @access private\n */\nclass JimpleProxified extends Jimple {\n    /**\n     * Builds a proxified Jimple instance from a Jimple instance\n     *\n     * @param {Jimple} jimple The jimple instance to proxify\n     *\n     * @returns {Jimple} A proxified Jimple instance\n     */\n    static fromJimple(jimple) {\n        if (jimple instanceof JimpleProxified) {\n            return jimple;\n        }\n\n        let Proxy = require(\"./proxy.js\"),\n            proxified = new JimpleProxified();\n\n        Object.getOwnPropertyNames(jimple).forEach(property => {\n            jimple[property].forEach((value, key) => {\n                if (proxified[property] instanceof Map) {\n                    proxified[property].set(key, value);\n                }\n\n                if (proxified[property] instanceof Set) {\n                    proxified[property].add(value);\n                }\n            });\n        });\n\n        return new Proxy(proxified);\n    }\n}\n\nmodule.exports = Jimple;\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Jimple",
    "memberof": "src/index.js",
    "longname": "src/index.js~Jimple",
    "access": "public",
    "export": false,
    "importPath": "jimple",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/index.js~Jimple",
    "longname": "src/index.js~Jimple#constructor",
    "access": null,
    "description": "Builds a new Jimple instance",
    "lineNumber": 10,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "values",
    "memberof": "src/index.js~Jimple",
    "longname": "src/index.js~Jimple#values",
    "access": "protected",
    "description": null,
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "Map<String, *>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "tagmap",
    "memberof": "src/index.js~Jimple",
    "longname": "src/index.js~Jimple#tagmap",
    "access": "protected",
    "description": null,
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "Map<String, Set>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "shared",
    "memberof": "src/index.js~Jimple",
    "longname": "src/index.js~Jimple#shared",
    "access": "protected",
    "description": null,
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "Map<String, *>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "frozen",
    "memberof": "src/index.js~Jimple",
    "longname": "src/index.js~Jimple#frozen",
    "access": "protected",
    "description": null,
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "Set<String>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "use",
    "memberof": "src/index.js~Jimple",
    "longname": "src/index.js~Jimple#use",
    "access": null,
    "description": "",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*} Result of executing the provided function as code"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<String>",
          "Function(deps: *, container: Jimple): *"
        ],
        "spread": false,
        "optional": false,
        "name": "deps",
        "description": "List of dependencies to inject or executable function"
      },
      {
        "nullable": null,
        "types": [
          "Function(deps: *, container: Jimple): *"
        ],
        "spread": false,
        "optional": true,
        "name": "code",
        "description": "Executable function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Result of executing the provided function as code"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "define",
    "memberof": "src/index.js~Jimple",
    "longname": "src/index.js~Jimple#define",
    "access": null,
    "description": "Sets a parameter or an object factory",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Jimple} The current Jimple instance"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The unique identifier for the parameter or factory"
      },
      {
        "nullable": null,
        "types": [
          "*",
          "Function(container: Jimple): *"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The parameter value or a factory function"
      },
      {
        "nullable": null,
        "types": [
          "Array<String>"
        ],
        "spread": false,
        "optional": true,
        "name": "tags",
        "description": "An array of tags to associate to the parameter or factory"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Jimple"
      ],
      "spread": false,
      "description": "The current Jimple instance"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "share",
    "memberof": "src/index.js~Jimple",
    "longname": "src/index.js~Jimple#share",
    "access": null,
    "description": "",
    "lineNumber": 113,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Jimple} The current Jimple instance"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The unique identifier for the factory"
      },
      {
        "nullable": null,
        "types": [
          "Function(container: Jimple): *"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "The executable factory function"
      },
      {
        "nullable": null,
        "types": [
          "Array<String>"
        ],
        "spread": false,
        "optional": true,
        "name": "tags",
        "description": "An array of tags to associate to the factory"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Jimple"
      ],
      "spread": false,
      "description": "The current Jimple instance"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "factory",
    "memberof": "src/index.js~Jimple",
    "longname": "src/index.js~Jimple#factory",
    "access": null,
    "description": "",
    "lineNumber": 147,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Jimple} The current Jimple instance"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The unique identifier for the factory"
      },
      {
        "nullable": null,
        "types": [
          "Function(container: Jimple): *"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "The executable factory function"
      },
      {
        "nullable": null,
        "types": [
          "Array<String>"
        ],
        "spread": false,
        "optional": true,
        "name": "tags",
        "description": "An array of tags to associate to the factory"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Jimple"
      ],
      "spread": false,
      "description": "The current Jimple instance"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "extend",
    "memberof": "src/index.js~Jimple",
    "longname": "src/index.js~Jimple#extend",
    "access": null,
    "description": "",
    "lineNumber": 177,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Jimple} The current Jimple instance"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The unique identifier for the parameter or factory to extend"
      },
      {
        "nullable": null,
        "types": [
          "Function(service: *, container: Jimple): *"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "The executable extended function"
      },
      {
        "nullable": null,
        "types": [
          "Array<String>"
        ],
        "spread": false,
        "optional": true,
        "name": "tags",
        "description": "An array of tags to associate to the the parameter or factory to extend"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Jimple"
      ],
      "spread": false,
      "description": "The current Jimple instance"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "exists",
    "memberof": "src/index.js~Jimple",
    "longname": "src/index.js~Jimple#exists",
    "access": null,
    "description": "",
    "lineNumber": 205,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} Wether the parameter, service or factory exists"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The unique identifier for the parameter, service or factory"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Wether the parameter, service or factory exists"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "get",
    "memberof": "src/index.js~Jimple",
    "longname": "src/index.js~Jimple#get",
    "access": null,
    "description": "",
    "lineNumber": 219,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*} Result of executing the factory function"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The unique identifier for the parameter, service or factory to fetch"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Result of executing the factory function"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getTagged",
    "memberof": "src/index.js~Jimple",
    "longname": "src/index.js~Jimple#getTagged",
    "access": null,
    "description": "",
    "see": [
      "Jimple#tagged"
    ],
    "lineNumber": 236,
    "deprecated": "Use {@link Jimple#tagged} instead",
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "tag",
        "description": "The tag name for which to fetch parameters, services or factories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Service names associated with the provided tag"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "tagged",
    "memberof": "src/index.js~Jimple",
    "longname": "src/index.js~Jimple#tagged",
    "access": null,
    "description": "",
    "lineNumber": 246,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} Service names associated with the provided tag"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "tag",
        "description": "tag The tag name for which to fetch parameters, services or factories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Service names associated with the provided tag"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "keys",
    "memberof": "src/index.js~Jimple",
    "longname": "src/index.js~Jimple#keys",
    "access": null,
    "description": "",
    "lineNumber": 260,
    "deprecated": true,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Declared parameter, service and factory names"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "protect",
    "memberof": "src/index.js~Jimple",
    "longname": "src/index.js~Jimple#protect",
    "access": null,
    "description": "",
    "lineNumber": 270,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function(): *} Function wrapping the provided function as code"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function(): *"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "Function to be protected from becoming a factory"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function(): *"
      ],
      "spread": false,
      "description": "Function wrapping the provided function as code"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "raw",
    "memberof": "src/index.js~Jimple",
    "longname": "src/index.js~Jimple#raw",
    "access": null,
    "description": "",
    "lineNumber": 284,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function(container: Jimple): *} The declared factory function"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The unique identifier for the factory to fetch"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function(container: Jimple): *"
      ],
      "spread": false,
      "description": "The declared factory function"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "proxify",
    "memberof": "src/index.js~Jimple",
    "longname": "src/index.js~Jimple#proxify",
    "access": null,
    "description": "",
    "lineNumber": 300,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Jimple} The current Jimple instance wrapped in a Proxy"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Jimple"
      ],
      "spread": false,
      "description": "The current Jimple instance wrapped in a Proxy"
    },
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "JimpleProxified",
    "memberof": "src/index.js",
    "longname": "src/index.js~JimpleProxified",
    "access": "private",
    "export": false,
    "importPath": "jimple",
    "importStyle": null,
    "description": null,
    "lineNumber": 308,
    "interface": false,
    "extends": [
      "Jimple"
    ]
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "fromJimple",
    "memberof": "src/index.js~JimpleProxified",
    "longname": "src/index.js~JimpleProxified.fromJimple",
    "access": null,
    "description": "Builds a proxified Jimple instance from a Jimple instance",
    "lineNumber": 316,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Jimple} A proxified Jimple instance"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Jimple"
        ],
        "spread": false,
        "optional": false,
        "name": "jimple",
        "description": "The jimple instance to proxify"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Jimple"
      ],
      "spread": false,
      "description": "A proxified Jimple instance"
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/proxy.js",
    "memberof": null,
    "longname": "src/proxy.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "\"use strict\";\n\ntry {\n    require.resolve(\"harmony-reflect\");\n} catch (err) {\n    throw new Error(\"You should install harmony-reflect module and use the --harmony_proxies flag to use this feature\");\n}\n\nrequire(\"harmony-reflect\");\n\n/**\n * @access private\n */\nlet Jimple = require(\".\");\n\n/**\n * @access public\n * @extends {Jimple}\n */\nclass JimpleProxy extends Proxy {\n    /**\n     * Builds a proxy on a Jimple instance\n     *\n     * @param {?Jimple} A Jimple instance to wrap in a Proxy\n     */\n    constructor(jimple) {\n        let handler = {\n            get: (target, name) => {\n                return name in target ? target[name] : target.get(name);\n            },\n\n            set: (target, name, value, receiver) => {\n                if (name in target) {\n                    throw new Error(`Cannot define a service named ${name}`);\n                }\n\n                target.share(name, value);\n\n                return true;\n            },\n\n            has: (target, name) => target.exists(name),\n\n            deleteProperty: () => false\n        };\n\n        super(jimple || new Jimple(), handler);\n    }\n}\n\nmodule.exports = JimpleProxy;\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Jimple",
    "memberof": "src/proxy.js",
    "longname": "src/proxy.js~Jimple",
    "access": "private",
    "export": false,
    "importPath": "jimple/src/proxy.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "JimpleProxy",
    "memberof": "src/proxy.js",
    "longname": "src/proxy.js~JimpleProxy",
    "access": "public",
    "export": false,
    "importPath": "jimple/src/proxy.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "interface": false,
    "extends": [
      "Jimple"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/proxy.js~JimpleProxy",
    "longname": "src/proxy.js~JimpleProxy#constructor",
    "access": null,
    "description": "Builds a proxy on a Jimple instance",
    "lineNumber": 26,
    "params": [
      {
        "nullable": true,
        "types": [
          "Jimple"
        ],
        "spread": false,
        "optional": false,
        "name": "A",
        "description": "Jimple instance to wrap in a Proxy"
      }
    ],
    "generator": false
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/jimple.js",
    "memberof": null,
    "longname": "tests/jimple.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "\"use strict\";\n\nvar Jimple = require(\"../src\");\n\n/** @test {Jimple} */\ndescribe(\"Jimple\", () => {\n    let jimple;\n\n    beforeEach(() => jimple = new Jimple());\n\n    /** @test {Jimple#constructor} */\n    describe(\"constructor\", () => {\n        it(\"should instanciate\", () => jimple.should.be.an.object);\n\n        it(\"should be empty\", () => jimple.keys().should.be.empty);\n\n        it(\"should be frozen\", () => {\n            Object.isExtensible(jimple).should.be.false;\n            (() => jimple.foo = \"bar\").should.throw(Error);\n        });\n    });\n\n    /** @test {Jimple#define} */\n    describe(\".define\", () => {\n        it(\"should return jimple instance\", () => jimple.define(\"service\", () => {}).should.be.equal(jimple));\n\n        it(\"should define service\", () => jimple.define(\"service\", () => {}).keys().should.be.eql([\"service\"]));\n\n        it(\"should store callable\", () => {\n            let callable = () => {};\n\n            jimple.define(\"service\", callable).raw(\"service\").should.be.equal(callable);\n        });\n\n        it(\"should store value as callable\", () => {\n            let value = 42;\n\n            jimple.define(\"service\", value).raw(\"service\")().should.be.equal(value);\n        });\n\n        it(\"should tag callable\", () => jimple.define(\"service\", () => {}, [\"tag\"]).tagged(\"tag\").should.be.eql([\"service\"]));\n\n        it(\"should not tag same callable twice\", () => jimple.define(\"service\", () => {}, [\"tag\"]).define(\"service\", () => {}, [\"tag\"]).tagged(\"tag\").should.be.eql([\"service\"]));\n    });\n\n    /** @test {Jimple#share} */\n    describe(\".share\", () => {\n        it(\"should return jimple instance\", () => jimple.share(\"service\", () => {}).should.be.equal(jimple));\n\n        it(\"should wrap callable\", () => {\n            let callable = () => {};\n\n            jimple.share(\"service\", callable);\n\n            jimple.raw(\"service\").should.be.a.Function();\n            jimple.raw(\"service\").should.not.be.equal(callable);\n        });\n\n        it(\"should overwrite existing service\", () => {\n            let callable = () => {};\n\n            jimple.share(\"service\", callable);\n            jimple.share(\"service\", () => {});\n\n            jimple.raw(\"service\").should.not.be.equal(callable);\n        });\n\n        describe(\"factory\", () => {\n            it(\"should share service instance\", () => {\n                let service,\n                    callable = () => service = {};\n\n                jimple.share(\"service\", callable);\n\n                jimple.get(\"service\").should.equal(service);\n                jimple.get(\"service\").should.be.equal(jimple.get(\"service\"));\n            });\n\n            it(\"should receive jimple instance as an argument\", () => {\n                let callable = (arg) => arg.should.be.equal(jimple);\n\n                jimple.share(\"service\", callable);\n\n                jimple.get(\"service\");\n            });\n\n            it(\"should reset when service change\", () => {\n                let service,\n                    callable = () => service = {};\n\n                jimple.share(\"service\", callable);\n\n                jimple.get(\"service\").should.equal(service);\n\n                jimple.share(\"service\", () => ({}));\n\n                jimple.get(\"service\").should.not.equal(service);\n            })\n        });\n    });\n\n    /** @test {Jimple#factory} */\n    describe(\".factory\", () => {\n        it(\"should return jimple instance\", () => jimple.factory(\"service\", () => {}).should.be.equal(jimple));\n\n        it(\"should wrap callable\", () => {\n            let callable = () => {};\n\n            jimple.factory(\"factory\", callable);\n\n            jimple.raw(\"factory\").should.be.a.Function();\n            jimple.raw(\"factory\").should.not.be.equal(callable);\n        });\n\n        it(\"should delete shared instance\", () => {\n            let service,\n                callable = () => service = {};\n\n            jimple.share(\"service\", callable).get(\"service\");\n\n            jimple.factory(\"service\", () => ({})).get(\"service\").should.not.be.equal(service);\n        });\n\n        describe(\"factory\", () => {\n            it(\"should not share service instance\", () => {\n                let callable = () => ({});\n\n                jimple.factory(\"factory\", callable);\n\n                jimple.get(\"factory\").should.be.an.object;\n                jimple.get(\"factory\").should.be.eql({});\n                jimple.get(\"factory\").should.not.equal(jimple.get(\"factory\"));\n            });\n\n            it(\"should receive jimple instance as an argument\", () => {\n                let callable = (arg) => arg.should.be.equal(jimple);\n\n                jimple.factory(\"factory\", callable);\n\n                jimple.get(\"factory\");\n            });\n        });\n    });\n\n    /** @test {Jimple#extend} */\n    describe(\".extend\", () => {\n        it(\"should return jimple instance\", () => jimple.share(\"service\", () => {}).extend(\"service\", () => {}).should.be.equal(jimple));\n\n        it(\"should extend existing service\", () => {\n            let service,\n                callable = () => service = {};\n\n            jimple.share(\"service\", () => {});\n\n            jimple.extend(\"service\", callable).get(\"service\").should.be.equal(service);\n        });\n\n        it(\"should receive base service instance as first argument\", () => {\n            let service, extended,\n                callable = () => service = {},\n                extendedCallable = (arg) => arg.should.be.equal(service);\n\n            jimple.share(\"service\", callable);\n            jimple.extend(\"service\", extendedCallable);\n\n            jimple.get(\"service\");\n        });\n\n        it(\"should receive jimple instance as second argument\", () => {\n            let callable = (service, arg) => arg.should.be.equal(jimple);\n\n            jimple.share(\"service\", () => {});\n            jimple.extend(\"service\", callable);\n\n            jimple.get(\"service\");\n        });\n\n        it(\"should refuse to extend an already fetched service\", () => {\n            jimple.share(\"service\", () => {}).get(\"service\");\n\n            (() => jimple.extend(\"service\", () => {})).should.throw(Error);\n        });\n\n        it(\"should refuse to extend an already used factory\", () => {\n            jimple.factory(\"factory\", () => {}).get(\"factory\");\n\n            (() => jimple.extend(\"factory\", () => {})).should.throw(Error);\n        });\n    });\n\n    /** @test {Jimple#use} */\n    describe(\".use\", () => {\n        it(\"should inject jimple\", () => jimple.use((arg) => arg.should.be.equal(jimple)));\n\n        it(\"should inject given service\", () => {\n            let service,\n                callable = () => service = {};\n\n            jimple.share(\"service\", callable);\n\n            jimple.use([\"service\"], (arg) => arg.should.be.equal(service));\n        });\n\n        it(\"should inject given services\", () => {\n            let service, otherService,\n                callable = () => service = {},\n                otherCallable = () => otherService = {};\n\n            jimple.share(\"service\", callable);\n            jimple.share(\"otherService\", otherCallable);\n\n            jimple.use([\"service\", \"otherService\"], (arg, otherArg) => {\n                arg.should.be.equal(service);\n                otherArg.should.be.equal(otherService);\n            });\n        });\n    });\n\n    /** @test {Jimple#protect} */\n    describe(\".protect\", () => {\n        it(\"should wrap callable\", () => {\n            let callable = () => {};\n\n            jimple.protect(callable).should.not.be.equal(callable);\n            jimple.protect(callable)().should.be.equal(callable);\n        });\n    });\n\n    /** @test {Jimple#raw} */\n    describe(\".raw\", () => {\n        it(\"should return raw callable\", () => {\n            let callable = () => {};\n\n            jimple.define(\"service\", callable).raw(\"service\").should.be.equal(callable);\n        });\n\n        it(\"should return raw callable for value\", () => jimple.define(\"service\", 42).raw(\"service\").should.be.a.Function());\n    });\n\n    /** @test {Jimple#tagged} */\n    describe(\".tagged\", () => {\n        it(\"should return tagged service names\", () => {\n            jimple.define(\"service\", () => {}, [\"tag\", \"gat\"]);\n            jimple.define(\"ecivres\", () => {}, [\"tag\"]);\n\n            jimple.tagged(\"tag\").should.be.eql([\"service\", \"ecivres\"]);\n            jimple.tagged(\"gat\").should.be.eql([\"service\"]);\n        });\n    });\n\n    /** @test {Jimple#proxify} */\n    describe(\".proxify\", () => {\n        beforeEach(() => {\n            let should = require(\"should\");\n\n            should.extend(\"then\", Proxy.prototype);\n            should.extend(\"Boolean\", Proxy.prototype);\n        });\n\n        it(\"should return a proxified instance\", () => jimple.proxify().should.be.an.instanceof(Jimple));\n\n        it(\"should be extensible\", () => Object.isExtensible(jimple.proxify()).should.be.true);\n\n        it(\"should be idempotent\", () => {\n            (jimple.proxify().proxify() === jimple).should.be.true;\n            (jimple.proxify().proxify() === jimple.proxify()).should.be.true;\n        });\n\n        describe(\"traps\", () => {\n            beforeEach(() => jimple = jimple.proxify());\n\n            describe(\".get\", () => {\n                it(\"should not override native methods\", () => {\n                    let service,\n                        callable = () => service = {};\n\n                    jimple.share(\"service\", callable);\n\n                    jimple.get(\"service\").should.be.equal(service);\n                });\n\n                it(\"should fetch service\", () => {\n                    let service,\n                        callable = () => service = {};\n\n                    jimple.share(\"service\", callable);\n\n                    jimple.service.should.be.equal(service);\n                });\n\n                it(\"should execute factory\", () => {\n                    let service,\n                        callable = () => service = {};\n\n                    jimple.factory(\"service\", callable);\n\n                    jimple.service.should.be.an.object;\n                    jimple.service.should.be.eql({});\n                    jimple.service.should.not.equal(jimple.service);\n                });\n            });\n\n            describe(\".set\", () => {\n                it(\"should refuse to override native methods\", () => {\n                    (() => jimple.factory = () => {\n                    }).should.throw(Error);\n                    (() => jimple.get = () => {\n                    }).should.throw(Error);\n                });\n\n                it(\"should define a shared service\", () => {\n                    let service;\n\n                    jimple.service = () => service = {};\n\n                    jimple.get(\"service\").should.equal(service);\n                    jimple.get(\"service\").should.be.equal(jimple.get(\"service\"));\n                });\n            });\n\n            describe(\".has\", () => {\n                it(\"should check if service exists\", () => {\n                    jimple.service = () => {\n                    };\n\n                    (\"service\" in jimple).should.be.true;\n                    (\"factory\" in jimple).should.be.false;\n                });\n\n                it(\"should check if factory exists\", () => {\n                    jimple.factory(\"service\", () => {\n                    });\n\n                    (\"service\" in jimple).should.be.true;\n                    (\"factory\" in jimple).should.be.false;\n                });\n            });\n\n            describe(\".delete\", () => {\n                it(\"should prevent deletion\", () => {\n                    jimple.service = () => {\n                    };\n\n                    (() => delete jimple.service).should.throw(Error);\n                });\n            });\n        });\n\n        /** @test {Jimple#share} */\n        describe(\".share\", () => {\n            beforeEach(() => jimple = jimple.proxify());\n\n            describe(\"factory\", () => {\n                it(\"should receive jimple proxy instance as an argument\", () => {\n                    let otherService,\n                        callable = (arg) => arg.otherService.should.be.equal(otherService),\n                        otherCallable = () => otherService = {};\n\n                    jimple.share(\"service\", callable);\n                    jimple.share(\"otherService\", otherCallable);\n\n                    jimple.get(\"service\");\n                });\n            });\n        });\n\n        /** @test {Jimple#factory} */\n        describe(\".factory\", () => {\n            beforeEach(() => jimple = jimple.proxify());\n\n            describe(\"factory\", () => {\n                it(\"should receive jimple proxy instance as an argument\", () => {\n                    let service,\n                        callable = (arg) => arg.service.should.be.equal(service),\n                        otherCallable = () => service = {};\n\n                    jimple.share(\"service\", otherCallable);\n                    jimple.factory(\"factory\", callable);\n\n                    jimple.get(\"factory\");\n                });\n            });\n        });\n\n        /** @test {JimpleProxified#fromJimple} */\n        describe(\"cast\", () => {\n            it(\"should keep current state\", () => {\n                jimple.share(\"service\", () => ({}));\n                jimple.share(\"otherService\", () => {});\n                jimple.share(\"taggedService\", () => {}, [\"tag\"]);\n\n                let fetchedService = jimple.get(\"service\");\n                jimple = jimple.proxify();\n\n                jimple.service.should.be.equal(fetchedService);\n                (\"otherService\" in jimple).should.be.true;\n                jimple.tagged(\"tag\").should.be.eql([\"taggedService\"]);\n            });\n        })\n    });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe0",
    "testId": 0,
    "memberof": "tests/jimple.js",
    "testDepth": 0,
    "longname": "tests/jimple.js~describe0",
    "access": null,
    "description": "Jimple",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Jimple}"
      }
    ],
    "testTargets": [
      "Jimple"
    ]
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe1",
    "testId": 1,
    "memberof": "tests/jimple.js~describe0",
    "testDepth": 1,
    "longname": "tests/jimple.js~describe0.describe1",
    "access": null,
    "description": "constructor",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Jimple#constructor}"
      }
    ],
    "testTargets": [
      "Jimple#constructor"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it2",
    "testId": 2,
    "memberof": "tests/jimple.js~describe0.describe1",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe1.it2",
    "access": null,
    "description": "should instanciate",
    "lineNumber": 13
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it3",
    "testId": 3,
    "memberof": "tests/jimple.js~describe0.describe1",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe1.it3",
    "access": null,
    "description": "should be empty",
    "lineNumber": 15
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it4",
    "testId": 4,
    "memberof": "tests/jimple.js~describe0.describe1",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe1.it4",
    "access": null,
    "description": "should be frozen",
    "lineNumber": 17
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe5",
    "testId": 5,
    "memberof": "tests/jimple.js~describe0",
    "testDepth": 1,
    "longname": "tests/jimple.js~describe0.describe5",
    "access": null,
    "description": ".define",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Jimple#define}"
      }
    ],
    "testTargets": [
      "Jimple#define"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it6",
    "testId": 6,
    "memberof": "tests/jimple.js~describe0.describe5",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe5.it6",
    "access": null,
    "description": "should return jimple instance",
    "lineNumber": 25
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it7",
    "testId": 7,
    "memberof": "tests/jimple.js~describe0.describe5",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe5.it7",
    "access": null,
    "description": "should define service",
    "lineNumber": 27
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it8",
    "testId": 8,
    "memberof": "tests/jimple.js~describe0.describe5",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe5.it8",
    "access": null,
    "description": "should store callable",
    "lineNumber": 29
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it9",
    "testId": 9,
    "memberof": "tests/jimple.js~describe0.describe5",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe5.it9",
    "access": null,
    "description": "should store value as callable",
    "lineNumber": 35
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it10",
    "testId": 10,
    "memberof": "tests/jimple.js~describe0.describe5",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe5.it10",
    "access": null,
    "description": "should tag callable",
    "lineNumber": 41
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it11",
    "testId": 11,
    "memberof": "tests/jimple.js~describe0.describe5",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe5.it11",
    "access": null,
    "description": "should not tag same callable twice",
    "lineNumber": 43
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe12",
    "testId": 12,
    "memberof": "tests/jimple.js~describe0",
    "testDepth": 1,
    "longname": "tests/jimple.js~describe0.describe12",
    "access": null,
    "description": ".share",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Jimple#share}"
      }
    ],
    "testTargets": [
      "Jimple#share"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it13",
    "testId": 13,
    "memberof": "tests/jimple.js~describe0.describe12",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe12.it13",
    "access": null,
    "description": "should return jimple instance",
    "lineNumber": 48
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it14",
    "testId": 14,
    "memberof": "tests/jimple.js~describe0.describe12",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe12.it14",
    "access": null,
    "description": "should wrap callable",
    "lineNumber": 50
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it15",
    "testId": 15,
    "memberof": "tests/jimple.js~describe0.describe12",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe12.it15",
    "access": null,
    "description": "should overwrite existing service",
    "lineNumber": 59
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe16",
    "testId": 16,
    "memberof": "tests/jimple.js~describe0.describe12",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe12.describe16",
    "access": null,
    "description": "factory",
    "lineNumber": 68
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it17",
    "testId": 17,
    "memberof": "tests/jimple.js~describe0.describe12.describe16",
    "testDepth": 3,
    "longname": "tests/jimple.js~describe0.describe12.describe16.it17",
    "access": null,
    "description": "should share service instance",
    "lineNumber": 69
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it18",
    "testId": 18,
    "memberof": "tests/jimple.js~describe0.describe12.describe16",
    "testDepth": 3,
    "longname": "tests/jimple.js~describe0.describe12.describe16.it18",
    "access": null,
    "description": "should receive jimple instance as an argument",
    "lineNumber": 79
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it19",
    "testId": 19,
    "memberof": "tests/jimple.js~describe0.describe12.describe16",
    "testDepth": 3,
    "longname": "tests/jimple.js~describe0.describe12.describe16.it19",
    "access": null,
    "description": "should reset when service change",
    "lineNumber": 87
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe20",
    "testId": 20,
    "memberof": "tests/jimple.js~describe0",
    "testDepth": 1,
    "longname": "tests/jimple.js~describe0.describe20",
    "access": null,
    "description": ".factory",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Jimple#factory}"
      }
    ],
    "testTargets": [
      "Jimple#factory"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it21",
    "testId": 21,
    "memberof": "tests/jimple.js~describe0.describe20",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe20.it21",
    "access": null,
    "description": "should return jimple instance",
    "lineNumber": 104
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it22",
    "testId": 22,
    "memberof": "tests/jimple.js~describe0.describe20",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe20.it22",
    "access": null,
    "description": "should wrap callable",
    "lineNumber": 106
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it23",
    "testId": 23,
    "memberof": "tests/jimple.js~describe0.describe20",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe20.it23",
    "access": null,
    "description": "should delete shared instance",
    "lineNumber": 115
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe24",
    "testId": 24,
    "memberof": "tests/jimple.js~describe0.describe20",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe20.describe24",
    "access": null,
    "description": "factory",
    "lineNumber": 124
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it25",
    "testId": 25,
    "memberof": "tests/jimple.js~describe0.describe20.describe24",
    "testDepth": 3,
    "longname": "tests/jimple.js~describe0.describe20.describe24.it25",
    "access": null,
    "description": "should not share service instance",
    "lineNumber": 125
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it26",
    "testId": 26,
    "memberof": "tests/jimple.js~describe0.describe20.describe24",
    "testDepth": 3,
    "longname": "tests/jimple.js~describe0.describe20.describe24.it26",
    "access": null,
    "description": "should receive jimple instance as an argument",
    "lineNumber": 135
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe27",
    "testId": 27,
    "memberof": "tests/jimple.js~describe0",
    "testDepth": 1,
    "longname": "tests/jimple.js~describe0.describe27",
    "access": null,
    "description": ".extend",
    "lineNumber": 146,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Jimple#extend}"
      }
    ],
    "testTargets": [
      "Jimple#extend"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it28",
    "testId": 28,
    "memberof": "tests/jimple.js~describe0.describe27",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe27.it28",
    "access": null,
    "description": "should return jimple instance",
    "lineNumber": 147
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it29",
    "testId": 29,
    "memberof": "tests/jimple.js~describe0.describe27",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe27.it29",
    "access": null,
    "description": "should extend existing service",
    "lineNumber": 149
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it30",
    "testId": 30,
    "memberof": "tests/jimple.js~describe0.describe27",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe27.it30",
    "access": null,
    "description": "should receive base service instance as first argument",
    "lineNumber": 158
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it31",
    "testId": 31,
    "memberof": "tests/jimple.js~describe0.describe27",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe27.it31",
    "access": null,
    "description": "should receive jimple instance as second argument",
    "lineNumber": 169
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it32",
    "testId": 32,
    "memberof": "tests/jimple.js~describe0.describe27",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe27.it32",
    "access": null,
    "description": "should refuse to extend an already fetched service",
    "lineNumber": 178
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it33",
    "testId": 33,
    "memberof": "tests/jimple.js~describe0.describe27",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe27.it33",
    "access": null,
    "description": "should refuse to extend an already used factory",
    "lineNumber": 184
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe34",
    "testId": 34,
    "memberof": "tests/jimple.js~describe0",
    "testDepth": 1,
    "longname": "tests/jimple.js~describe0.describe34",
    "access": null,
    "description": ".use",
    "lineNumber": 192,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Jimple#use}"
      }
    ],
    "testTargets": [
      "Jimple#use"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it35",
    "testId": 35,
    "memberof": "tests/jimple.js~describe0.describe34",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe34.it35",
    "access": null,
    "description": "should inject jimple",
    "lineNumber": 193
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it36",
    "testId": 36,
    "memberof": "tests/jimple.js~describe0.describe34",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe34.it36",
    "access": null,
    "description": "should inject given service",
    "lineNumber": 195
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it37",
    "testId": 37,
    "memberof": "tests/jimple.js~describe0.describe34",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe34.it37",
    "access": null,
    "description": "should inject given services",
    "lineNumber": 204
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe38",
    "testId": 38,
    "memberof": "tests/jimple.js~describe0",
    "testDepth": 1,
    "longname": "tests/jimple.js~describe0.describe38",
    "access": null,
    "description": ".protect",
    "lineNumber": 220,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Jimple#protect}"
      }
    ],
    "testTargets": [
      "Jimple#protect"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it39",
    "testId": 39,
    "memberof": "tests/jimple.js~describe0.describe38",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe38.it39",
    "access": null,
    "description": "should wrap callable",
    "lineNumber": 221
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe40",
    "testId": 40,
    "memberof": "tests/jimple.js~describe0",
    "testDepth": 1,
    "longname": "tests/jimple.js~describe0.describe40",
    "access": null,
    "description": ".raw",
    "lineNumber": 230,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Jimple#raw}"
      }
    ],
    "testTargets": [
      "Jimple#raw"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it41",
    "testId": 41,
    "memberof": "tests/jimple.js~describe0.describe40",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe40.it41",
    "access": null,
    "description": "should return raw callable",
    "lineNumber": 231
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it42",
    "testId": 42,
    "memberof": "tests/jimple.js~describe0.describe40",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe40.it42",
    "access": null,
    "description": "should return raw callable for value",
    "lineNumber": 237
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe43",
    "testId": 43,
    "memberof": "tests/jimple.js~describe0",
    "testDepth": 1,
    "longname": "tests/jimple.js~describe0.describe43",
    "access": null,
    "description": ".tagged",
    "lineNumber": 241,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Jimple#tagged}"
      }
    ],
    "testTargets": [
      "Jimple#tagged"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it44",
    "testId": 44,
    "memberof": "tests/jimple.js~describe0.describe43",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe43.it44",
    "access": null,
    "description": "should return tagged service names",
    "lineNumber": 242
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe45",
    "testId": 45,
    "memberof": "tests/jimple.js~describe0",
    "testDepth": 1,
    "longname": "tests/jimple.js~describe0.describe45",
    "access": null,
    "description": ".proxify",
    "lineNumber": 252,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Jimple#proxify}"
      }
    ],
    "testTargets": [
      "Jimple#proxify"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it46",
    "testId": 46,
    "memberof": "tests/jimple.js~describe0.describe45",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe45.it46",
    "access": null,
    "description": "should return a proxified instance",
    "lineNumber": 260
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it47",
    "testId": 47,
    "memberof": "tests/jimple.js~describe0.describe45",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe45.it47",
    "access": null,
    "description": "should be extensible",
    "lineNumber": 262
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it48",
    "testId": 48,
    "memberof": "tests/jimple.js~describe0.describe45",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe45.it48",
    "access": null,
    "description": "should be idempotent",
    "lineNumber": 264
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe49",
    "testId": 49,
    "memberof": "tests/jimple.js~describe0.describe45",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe45.describe49",
    "access": null,
    "description": "traps",
    "lineNumber": 269
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe50",
    "testId": 50,
    "memberof": "tests/jimple.js~describe0.describe45.describe49",
    "testDepth": 3,
    "longname": "tests/jimple.js~describe0.describe45.describe49.describe50",
    "access": null,
    "description": ".get",
    "lineNumber": 272
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it51",
    "testId": 51,
    "memberof": "tests/jimple.js~describe0.describe45.describe49.describe50",
    "testDepth": 4,
    "longname": "tests/jimple.js~describe0.describe45.describe49.describe50.it51",
    "access": null,
    "description": "should not override native methods",
    "lineNumber": 273
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it52",
    "testId": 52,
    "memberof": "tests/jimple.js~describe0.describe45.describe49.describe50",
    "testDepth": 4,
    "longname": "tests/jimple.js~describe0.describe45.describe49.describe50.it52",
    "access": null,
    "description": "should fetch service",
    "lineNumber": 282
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it53",
    "testId": 53,
    "memberof": "tests/jimple.js~describe0.describe45.describe49.describe50",
    "testDepth": 4,
    "longname": "tests/jimple.js~describe0.describe45.describe49.describe50.it53",
    "access": null,
    "description": "should execute factory",
    "lineNumber": 291
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe54",
    "testId": 54,
    "memberof": "tests/jimple.js~describe0.describe45.describe49",
    "testDepth": 3,
    "longname": "tests/jimple.js~describe0.describe45.describe49.describe54",
    "access": null,
    "description": ".set",
    "lineNumber": 303
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it55",
    "testId": 55,
    "memberof": "tests/jimple.js~describe0.describe45.describe49.describe54",
    "testDepth": 4,
    "longname": "tests/jimple.js~describe0.describe45.describe49.describe54.it55",
    "access": null,
    "description": "should refuse to override native methods",
    "lineNumber": 304
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it56",
    "testId": 56,
    "memberof": "tests/jimple.js~describe0.describe45.describe49.describe54",
    "testDepth": 4,
    "longname": "tests/jimple.js~describe0.describe45.describe49.describe54.it56",
    "access": null,
    "description": "should define a shared service",
    "lineNumber": 311
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe57",
    "testId": 57,
    "memberof": "tests/jimple.js~describe0.describe45.describe49",
    "testDepth": 3,
    "longname": "tests/jimple.js~describe0.describe45.describe49.describe57",
    "access": null,
    "description": ".has",
    "lineNumber": 321
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it58",
    "testId": 58,
    "memberof": "tests/jimple.js~describe0.describe45.describe49.describe57",
    "testDepth": 4,
    "longname": "tests/jimple.js~describe0.describe45.describe49.describe57.it58",
    "access": null,
    "description": "should check if service exists",
    "lineNumber": 322
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it59",
    "testId": 59,
    "memberof": "tests/jimple.js~describe0.describe45.describe49.describe57",
    "testDepth": 4,
    "longname": "tests/jimple.js~describe0.describe45.describe49.describe57.it59",
    "access": null,
    "description": "should check if factory exists",
    "lineNumber": 330
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe60",
    "testId": 60,
    "memberof": "tests/jimple.js~describe0.describe45.describe49",
    "testDepth": 3,
    "longname": "tests/jimple.js~describe0.describe45.describe49.describe60",
    "access": null,
    "description": ".delete",
    "lineNumber": 339
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it61",
    "testId": 61,
    "memberof": "tests/jimple.js~describe0.describe45.describe49.describe60",
    "testDepth": 4,
    "longname": "tests/jimple.js~describe0.describe45.describe49.describe60.it61",
    "access": null,
    "description": "should prevent deletion",
    "lineNumber": 340
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe62",
    "testId": 62,
    "memberof": "tests/jimple.js~describe0.describe45",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe45.describe62",
    "access": null,
    "description": ".share",
    "lineNumber": 350,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Jimple#share}"
      }
    ],
    "testTargets": [
      "Jimple#share"
    ]
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe63",
    "testId": 63,
    "memberof": "tests/jimple.js~describe0.describe45.describe62",
    "testDepth": 3,
    "longname": "tests/jimple.js~describe0.describe45.describe62.describe63",
    "access": null,
    "description": "factory",
    "lineNumber": 353
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it64",
    "testId": 64,
    "memberof": "tests/jimple.js~describe0.describe45.describe62.describe63",
    "testDepth": 4,
    "longname": "tests/jimple.js~describe0.describe45.describe62.describe63.it64",
    "access": null,
    "description": "should receive jimple proxy instance as an argument",
    "lineNumber": 354
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe65",
    "testId": 65,
    "memberof": "tests/jimple.js~describe0.describe45",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe45.describe65",
    "access": null,
    "description": ".factory",
    "lineNumber": 368,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Jimple#factory}"
      }
    ],
    "testTargets": [
      "Jimple#factory"
    ]
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe66",
    "testId": 66,
    "memberof": "tests/jimple.js~describe0.describe45.describe65",
    "testDepth": 3,
    "longname": "tests/jimple.js~describe0.describe45.describe65.describe66",
    "access": null,
    "description": "factory",
    "lineNumber": 371
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it67",
    "testId": 67,
    "memberof": "tests/jimple.js~describe0.describe45.describe65.describe66",
    "testDepth": 4,
    "longname": "tests/jimple.js~describe0.describe45.describe65.describe66.it67",
    "access": null,
    "description": "should receive jimple proxy instance as an argument",
    "lineNumber": 372
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe68",
    "testId": 68,
    "memberof": "tests/jimple.js~describe0.describe45",
    "testDepth": 2,
    "longname": "tests/jimple.js~describe0.describe45.describe68",
    "access": null,
    "description": "cast",
    "lineNumber": 386,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{JimpleProxified#fromJimple}"
      }
    ],
    "testTargets": [
      "JimpleProxified#fromJimple"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it69",
    "testId": 69,
    "memberof": "tests/jimple.js~describe0.describe45.describe68",
    "testDepth": 3,
    "longname": "tests/jimple.js~describe0.describe45.describe68.it69",
    "access": null,
    "description": "should keep current state",
    "lineNumber": 387
  }
]